{"version":3,"sources":["src/_scripts/node_modules/browser-pack/_prelude.js","src/_scripts/node_modules/detect-browser/index.js","src/_scripts/node_modules/os-browserify/browser.js","src/_scripts/node_modules/process/browser.js","src/_scripts/src/_scripts/components/animations.js","src/_scripts/src/_scripts/components/listeners.js","src/_scripts/src/_scripts/components/svg.js","src/_scripts/src/_scripts/components/warnings.js","src/_scripts/src/_scripts/main.js"],"names":[],"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","file":"main.js","sourcesContent":["(function(){function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s}return e})()","/**\n  # detect-browser\n\n  This is a package that attempts to detect a browser vendor and version (in\n  a semver compatible format) using a navigator useragent in a browser or\n  `process.version` in node.\n\n  ## NOTE: Version 2.x release\n\n  Release 2.0 introduces a breaking API change (hence the major release)\n  which requires invocation of a `detect` function rather than just inclusion of\n  the module.  PR [#46](https://github.com/DamonOehlman/detect-browser/pull/46)\n  provides more context as to why this change has been made.\n\n  ## Example Usage\n\n  <<< examples/simple.js\n\n  Or you can use a switch statement:\n\n  <<< examples/switch.js\n\n  ## Adding additional browser support\n\n  The current list of browsers that can be detected by `detect-browser` is\n  not exhaustive. If you have a browser that you would like to add support for\n  then please submit a pull request with the implementation.\n\n  Creating an acceptable implementation requires two things:\n\n  1. A test demonstrating that the regular expression you have defined identifies\n     your new browser correctly.  Examples of this can be found in the\n     `test/logic.js` file.\n\n  2. Write the actual regex to the `lib/detectBrowser.js` file. In most cases adding\n     the regex to the list of existing regexes will be suitable (if usage of `detect-brower`\n     returns `undefined` for instance), but in some cases you might have to add it before\n     an existing regex.  This would be true for a case where you have a browser that\n     is a specialised variant of an existing browser but is identified as the\n     non-specialised case.\n\n  When writing the regular expression remember that you would write it containing a\n  single [capturing group](https://regexone.com/lesson/capturing_groups) which\n  captures the version number of the browser.\n\n**/\n\nfunction detect() {\n  var nodeVersion = getNodeVersion();\n  if (nodeVersion) {\n    return nodeVersion;\n  } else if (typeof navigator !== 'undefined') {\n    return parseUserAgent(navigator.userAgent);\n  }\n\n  return null;\n}\n\nfunction detectOS(userAgentString) {\n  var rules = getOperatingSystemRules();\n  var detected = rules.filter(function (os) {\n    return os.rule && os.rule.test(userAgentString);\n  })[0];\n\n  return detected ? detected.name : null;\n}\n\nfunction getNodeVersion() {\n  var isNode = typeof navigator === 'undefined' && typeof process !== 'undefined';\n  return isNode ? {\n    name: 'node',\n    version: process.version.slice(1),\n    os: require('os').type().toLowerCase()\n  } : null;\n}\n\nfunction parseUserAgent(userAgentString) {\n  var browsers = getBrowserRules();\n  if (!userAgentString) {\n    return null;\n  }\n\n  var detected = browsers.map(function(browser) {\n    var match = browser.rule.exec(userAgentString);\n    var version = match && match[1].split(/[._]/).slice(0,3);\n\n    if (version && version.length < 3) {\n      version = version.concat(version.length == 1 ? [0, 0] : [0]);\n    }\n\n    return match && {\n      name: browser.name,\n      version: version.join('.')\n    };\n  }).filter(Boolean)[0] || null;\n\n  if (detected) {\n    detected.os = detectOS(userAgentString);\n  }\n\n  return detected;\n}\n\nfunction getBrowserRules() {\n  return buildRules([\n    [ 'aol', /AOLShield\\/([0-9\\._]+)/ ],\n    [ 'edge', /Edge\\/([0-9\\._]+)/ ],\n    [ 'yandexbrowser', /YaBrowser\\/([0-9\\._]+)/ ],\n    [ 'vivaldi', /Vivaldi\\/([0-9\\.]+)/ ],\n    [ 'kakaotalk', /KAKAOTALK\\s([0-9\\.]+)/ ],\n    [ 'chrome', /(?!Chrom.*OPR)Chrom(?:e|ium)\\/([0-9\\.]+)(:?\\s|$)/ ],\n    [ 'phantomjs', /PhantomJS\\/([0-9\\.]+)(:?\\s|$)/ ],\n    [ 'crios', /CriOS\\/([0-9\\.]+)(:?\\s|$)/ ],\n    [ 'firefox', /Firefox\\/([0-9\\.]+)(?:\\s|$)/ ],\n    [ 'fxios', /FxiOS\\/([0-9\\.]+)/ ],\n    [ 'opera', /Opera\\/([0-9\\.]+)(?:\\s|$)/ ],\n    [ 'opera', /OPR\\/([0-9\\.]+)(:?\\s|$)$/ ],\n    [ 'ie', /Trident\\/7\\.0.*rv\\:([0-9\\.]+).*\\).*Gecko$/ ],\n    [ 'ie', /MSIE\\s([0-9\\.]+);.*Trident\\/[4-7].0/ ],\n    [ 'ie', /MSIE\\s(7\\.0)/ ],\n    [ 'bb10', /BB10;\\sTouch.*Version\\/([0-9\\.]+)/ ],\n    [ 'android', /Android\\s([0-9\\.]+)/ ],\n    [ 'ios', /Version\\/([0-9\\._]+).*Mobile.*Safari.*/ ],\n    [ 'safari', /Version\\/([0-9\\._]+).*Safari/ ],\n    [ 'facebook', /FBAV\\/([0-9\\.]+)/],\n    [ 'instagram', /Instagram\\ ([0-9\\.]+)/]\n  ]);\n}\n\nfunction getOperatingSystemRules() {\n  return buildRules([\n    [ 'iOS', /iP(hone|od|ad)/ ],\n    [ 'Android OS', /Android/ ],\n    [ 'BlackBerry OS', /BlackBerry|BB10/ ],\n    [ 'Windows Mobile', /IEMobile/ ],\n    [ 'Amazon OS', /Kindle/ ],\n    [ 'Windows 3.11', /Win16/ ],\n    [ 'Windows 95', /(Windows 95)|(Win95)|(Windows_95)/ ],\n    [ 'Windows 98', /(Windows 98)|(Win98)/ ],\n    [ 'Windows 2000', /(Windows NT 5.0)|(Windows 2000)/ ],\n    [ 'Windows XP', /(Windows NT 5.1)|(Windows XP)/ ],\n    [ 'Windows Server 2003', /(Windows NT 5.2)/ ],\n    [ 'Windows Vista', /(Windows NT 6.0)/ ],\n    [ 'Windows 7', /(Windows NT 6.1)/ ],\n    [ 'Windows 8', /(Windows NT 6.2)/ ],\n    [ 'Windows 8.1', /(Windows NT 6.3)/ ],\n    [ 'Windows 10', /(Windows NT 10.0)/ ],\n    [ 'Windows ME', /Windows ME/ ],\n    [ 'Open BSD', /OpenBSD/ ],\n    [ 'Sun OS', /SunOS/ ],\n    [ 'Linux', /(Linux)|(X11)/ ],\n    [ 'Mac OS', /(Mac_PowerPC)|(Macintosh)/ ],\n    [ 'QNX', /QNX/ ],\n    [ 'BeOS', /BeOS/ ],\n    [ 'OS/2', /OS\\/2/ ],\n    [ 'Search Bot', /(nuhk)|(Googlebot)|(Yammybot)|(Openbot)|(Slurp)|(MSNBot)|(Ask Jeeves\\/Teoma)|(ia_archiver)/ ]\n  ]);\n}\n\nfunction buildRules(ruleTuples) {\n  return ruleTuples.map(function(tuple) {\n    return {\n      name: tuple[0],\n      rule: tuple[1]\n    };\n  });\n}\n\nmodule.exports = {\n  detect: detect,\n  detectOS: detectOS,\n  getNodeVersion: getNodeVersion,\n  parseUserAgent: parseUserAgent\n};\n","exports.endianness = function () { return 'LE' };\n\nexports.hostname = function () {\n    if (typeof location !== 'undefined') {\n        return location.hostname\n    }\n    else return '';\n};\n\nexports.loadavg = function () { return [] };\n\nexports.uptime = function () { return 0 };\n\nexports.freemem = function () {\n    return Number.MAX_VALUE;\n};\n\nexports.totalmem = function () {\n    return Number.MAX_VALUE;\n};\n\nexports.cpus = function () { return [] };\n\nexports.type = function () { return 'Browser' };\n\nexports.release = function () {\n    if (typeof navigator !== 'undefined') {\n        return navigator.appVersion;\n    }\n    return '';\n};\n\nexports.networkInterfaces\n= exports.getNetworkInterfaces\n= function () { return {} };\n\nexports.arch = function () { return 'javascript' };\n\nexports.platform = function () { return 'browser' };\n\nexports.tmpdir = exports.tmpDir = function () {\n    return '/tmp';\n};\n\nexports.EOL = '\\n';\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","function startProgressAnimation(progressBars, type) {\n  for (let path of progressBars) {\n    let progress = path.dataset.progress;\n    let fullLengthSVGPath = type === 'circle' ? 235.2 : 300;\n\n    path.style.strokeDashoffset = fullLengthSVGPath/100*(100-progress);\n  }\n}\n\nfunction startFunctionAnimationOnVisibleObject( object, functionAnimation, param, visiblePercentage ) {\n  const checkVisibleThisContainer = () => {\n    const winHeight = window.innerHeight;\n    const winScrollY = window.scrollY;\n\n    console.log( winHeight, winScrollY );\n\n    const _object = object;\n    const containerOffsetTop = _object.offsetTop;\n    const containerHeight = _object.getBoundingClientRect().height;\n\n    const offsetTopIncludeStartProgressAnimation = winHeight + winScrollY - containerHeight*(visiblePercentage || 0.5);\n\n    const resultCheckVisibleThisContainer = offsetTopIncludeStartProgressAnimation >= containerOffsetTop;\n\n    if (resultCheckVisibleThisContainer) {\n      functionAnimation(param, 'circle');\n      window.removeEventListener('scroll', checkVisibleThisContainer)\n    }\n  };\n\n  window.addEventListener('scroll', checkVisibleThisContainer );\n\n  checkVisibleThisContainer();\n}\n\nexport {startProgressAnimation, startFunctionAnimationOnVisibleObject}\n","import {startProgressAnimation} from './animations'\n\nfunction skillClickListener(skills) {\n  let involves = document.querySelectorAll('.software-skills__involve');\n  for (let skill of skills) {\n    skill.addEventListener('click', (e) => {\n      let involveList = e.currentTarget.querySelector('.software-skills__involve');\n      let SVGsWithAnimationInThis = e.currentTarget.querySelectorAll('.line-progress-bar__container [data-progress]');\n      if ( involveList ) {\n        if ( involveList.classList.contains('hidden') ) {\n          for (let involve of involves) {\n            involve.classList.add('hidden');\n          }\n          involveList.classList.remove('hidden');\n          startProgressAnimation(SVGsWithAnimationInThis, 'line');\n        } else {\n          for (let involve of involves) {\n            involve.classList.add('hidden');\n          }\n        }\n      }\n    });\n  }\n}\n\nexport {skillClickListener}\n","function resetSVG( progressBars ) {\n  for (let path of progressBars) {\n    let fullLengthSVGPath = path.getTotalLength();\n    path.style.strokeDasharray = fullLengthSVGPath;\n    path.style.strokeDashoffset = fullLengthSVGPath;\n  }\n}\n\nfunction onSVG( progressBars ) {\n  for (let path of progressBars) {\n    let progress = path.dataset.progress;\n    let fullLengthSVGPath = path.getTotalLength();\n    path.style.transition = 'stroke-dashoffset 2.5s';\n    path.style.strokeDashoffset = 0;\n\n  }\n}\n\nexport {resetSVG, onSVG}\n","function showWarning() {\n  let warning = document.querySelector('.warning');\n  warning.style.display = 'block'\n}\n\nexport {showWarning}\n","import {detect} from 'detect-browser';\nimport {startProgressAnimation, startFunctionAnimationOnVisibleObject} from './components/animations';\nimport {resetSVG, onSVG} from './components/svg';\nimport {skillClickListener} from './components/listeners';\nimport {showWarning} from './components/warnings';\n\nconst browser = detect();\n\n\nwindow.addEventListener('load', () => {\n  let circleProgressBars = document.querySelectorAll('.circle-progress-bar__front');\n  let skills = document.querySelectorAll('.software-skills__skill');\n  let skillsList = document.querySelector('.software-skills__list');\n\n  if ( browser.name === 'chrome') {\n    let allSVGpath = document.querySelectorAll('#svg circle, #svg rect, #svg line, #svg path, #svg ellipse, #svg polyline');\n\n    resetSVG(allSVGpath);\n    onSVG( allSVGpath );\n  } else {\n    showWarning();\n  }\n\n  skillClickListener(skills);\n\n  startFunctionAnimationOnVisibleObject(skillsList, startProgressAnimation, circleProgressBars);\n});\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}